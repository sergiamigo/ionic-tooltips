{"version":3,"sources":["../src/tooltip.spec.ts"],"names":[],"mappings":"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","file":"tooltip.spec.js","sourceRoot":"","sourcesContent":["import {\n  AfterViewInit,\n  Component, DebugElement, ElementRef, ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { async, ComponentFixture, TestBed } from '@angular/core/testing';\nimport { TooltipsModule } from './tooltips.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { IonicModule } from 'ionic-angular';\nimport { Tooltip } from './tooltip.directive';\nimport { TooltipBox } from './tooltip-box.component';\n\n\nexport class TestPage implements AfterViewInit {\n\n   button: ElementRef;\n\n   tooltip: Tooltip;\n\n  active: boolean = false;\n\n  constructor(public _viewport: ViewContainerRef) {}\n\n  getButtonNativeElement(): HTMLButtonElement {\n    return this.button.nativeElement;\n  }\n\n  getTooltip(): Tooltip {\n    return this.tooltip;\n  }\n\n  ngAfterViewInit() {\n    (this.tooltip as any).appRef.components.push({\n      _component: this\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tooltip-view',\n  template: '<button #btn tooltip=\"Hello world\" [duration]=\"1000\" [active]=\"active\">Click me</button>'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'button': [{ type: ViewChild, args: ['btn', ] },],\n'tooltip': [{ type: ViewChild, args: [Tooltip, ] },],\n};\n}\n\n\ndescribe('Tooltip', () => {\n\n  let de: DebugElement,\n    comp: TestPage,\n    fixture: ComponentFixture<TestPage>,\n    tooltip: any,\n    getTooltipBox: () => TooltipBox;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [TestPage],\n      imports: [\n        IonicModule.forRoot(TestPage), // to be able to inject Platform\n        BrowserAnimationsModule, // needed for TooltipsModule\n        TooltipsModule\n      ]\n    }).compileComponents();\n  }));\n\n  beforeEach(() => {\n    console.log(!!fixture, !!comp, !!de, !!tooltip);\n\n    fixture = TestBed.createComponent(TestPage);\n    fixture.autoDetectChanges(true);\n    comp = fixture.componentInstance;\n    de = fixture.debugElement;\n    tooltip = comp.getTooltip();\n    getTooltipBox = () => tooltip.tooltipElement.instance;\n  });\n\n  it('container page should exist', () => {\n    expect(comp).toBeDefined();\n    expect(comp instanceof TestPage).toBeTruthy();\n  });\n\n  it('should display TooltipBox on click for 1s', () => {\n    tooltip.onClick();\n    fixture.detectChanges();\n    expect(tooltip.tooltipElement).toBeDefined();\n    setTimeout(() => {\n      fixture.detectChanges();\n      expect(tooltip.tooltipElement).toBeUndefined();\n    }, 1000);\n  });\n\n  it('should display TooltipBox on press for 1s', () => {\n    tooltip.event = 'press';\n    tooltip.onPress();\n    fixture.detectChanges();\n    expect(tooltip.tooltipElement).toBeDefined();\n    setTimeout(() => {\n      fixture.detectChanges();\n      expect(tooltip.tooltipElement).toBeUndefined();\n    }, 1000);\n  });\n\n  it('should display TooltipBox when active', () => {\n    tooltip.active = true;\n    expect(tooltip.tooltipElement).toBeDefined();\n    expect(tooltip.active).toBeTruthy();\n  });\n\n  it('should contain \"Hello world\"', () => {\n    tooltip.active = true;\n    fixture.detectChanges();\n    expect(getTooltipBox().getNativeElement().innerText).toEqual('Hello world');\n  });\n\n});\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}